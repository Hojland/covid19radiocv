name: tag_and_deploy

on:
  pull_request:
    branches:
      - master
    types: [closed]
  workflow_dispatch:

env:
  APPLICATION_NAME: bert_email_router

jobs:
  tag_and_release:
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.version.outputs.new_tag }}
    steps:
      - uses: actions/checkout@main
        with:
          fetch-depth: "0"

      - name: "Git: Configure local settings"
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      - name: "Setup: Calculate next version number"
        uses: mathieudutour/github-tag-action@v4.1
        id: version
        with:
          tag_prefix: "v"
          dry_run: true
          default_bump: patch
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: "Changelog: Create full changelog for commit"
        uses: nuuday/github-changelog-action@master
        with:
          filename: CHANGELOG.md
          next_version: ${{ steps.version.outputs.new_version }}

      - name: "Git: Commit changed files and tag release"
        run: |
          git add CHANGELOG.md
          git commit -m "Changelog updated" CHANGELOG.md
          git tag -m "$Tagged new version: ${{ steps.version.outputs.new_version }}" -fa ${{ steps.version.outputs.new_tag }}
          git push --tags

      - name: "Changelog: Create changelog for release"
        uses: nuuday/github-changelog-action@master
        id: changelog
        with:
          filename: CHANGELOG.md
          next_version: ${{ steps.version.outputs.new_version }}

      - name: "Github: Create release"
        uses: actions/create-release@v1
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.new_tag }}
          release_name: Release ${{ steps.version.outputs.new_version }}
          draft: false
          prerelease: false
          body: ${{ steps.changelog.outputs.changelog }}
  build_and_push_gpu:
    runs-on: ubuntu-latest
    needs: [tag_and_release]
    steps:
      - uses: actions/checkout@v2
      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
      - name: Set docker name
        id: vars
        run: echo ::set-output name=docker_name::docker.pkg.github.com/${{ github.repository }}/${APPLICATION_NAME}
      - name: Build and push
        run: |
          IMAGE_ID=${{ steps.vars.outputs.docker_name }}:${{needs.tag_and_release.outputs.release_tag}}-gpu
          COMMIT_HASH=$(git rev-parse --short HEAD)
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          # https://github.com/easimon/maximize-build-space this is an alternative
          docker build -t ${IMAGE_ID} --build-arg COMPUTE_KERNEL=gpu --build-arg COMMIT_HASH=${COMMIT_HASH} -f Dockerfile . 
          docker push ${IMAGE_ID}
      - name: Log into registry again
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
      - name: Retag to latest
        run: |
          docker pull ${{ steps.vars.outputs.docker_name }}:${{needs.tag_and_release.outputs.release_tag}}-gpu
          docker tag ${{ steps.vars.outputs.docker_name }}:${{needs.tag_and_release.outputs.release_tag}}-gpu ${{ steps.vars.outputs.docker_name }}:latest-gpu
          docker push ${{ steps.vars.outputs.docker_name }}:latest-gpu
  build_and_push_cpu:
    runs-on: ubuntu-latest
    needs: [tag_and_release]
    steps:
      - uses: actions/checkout@v2
      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
      - name: Set docker name
        id: vars
        run: echo ::set-output name=docker_name::docker.pkg.github.com/${{ github.repository }}/${APPLICATION_NAME}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            IMAGE_NAME=python:3.8
            COMPUTE_KERNEL=cpu
            COMMIT_HASH=$(git rev-parse --short HEAD)
          push: true
          tags: ${{ steps.vars.outputs.docker_name }}:${{needs.tag_and_release.outputs.release_tag}}-cpu
      - name: Log into registry again
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
      - name: Retag to latest
        run: |
          docker pull ${{ steps.vars.outputs.docker_name }}:${{needs.tag_and_release.outputs.release_tag}}-cpu
          docker tag ${{ steps.vars.outputs.docker_name }}:${{needs.tag_and_release.outputs.release_tag}}-cpu ${{ steps.vars.outputs.docker_name }}:latest-cpu
          docker push ${{ steps.vars.outputs.docker_name }}:latest-cpu
  deploy_test:
    needs: [tag_and_release, build_and_push_cpu]
    runs-on: ubuntu-latest
    environment:
      name: Testing
      url: "https://${{ steps.deploy.outputs.hostname }}/docs"
    env:
      AWS_REGION: eu-central-1
      EKS_CLUSTER_NAME: shared-platforms-non-prod
    outputs:
      hostname: ${{ steps.deploy.outputs.hostname }}
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Setup kubeconfig
        id: setup-kubeconfig
        run: |
          aws eks --region $AWS_REGION update-kubeconfig \
            --name ${EKS_CLUSTER_NAME} \
            --role-arn ${{ secrets.AWS_EKS_ROLE_ARN }}
      - name: setup kustomize
        uses: imranismail/setup-kustomize@v1
        with:
          kustomize-version: "3.8.4"
      - name: Deploy k8s yaml
        id: deploy
        uses: ./.github/actions/k8s-deploy-action
        with:
          directory: ./k8s/environments/test
          image: docker.pkg.github.com/${{ github.repository }}/${{env.APPLICATION_NAME}}:${{needs.tag_and_release.outputs.release_tag}}-cpu
          namespace: martech-test
          app_id: bert-email-router
      - name: Get hostname
        run: echo "Hostname is ${{ steps.deploy.outputs.hostname }}"
  deploy_prod:
    needs: [tag_and_release, build_and_push_cpu, deploy_test]
#    if: github.event_name == 'pull_request' 
    runs-on: ubuntu-latest
    environment: 
      name: Production
      url: "https://${{ steps.deploy.outputs.hostname }}/docs"
    outputs:
      hostname: ${{ steps.deploy.outputs.hostname }}
    env:
      AWS_REGION: eu-central-1
      EKS_CLUSTER_NAME: shared-platforms-prod
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Setup kubeconfig
        id: setup-kubeconfig
        run: |
          aws eks --region $AWS_REGION update-kubeconfig \
            --name ${EKS_CLUSTER_NAME} \
            --role-arn ${{ secrets.AWS_EKS_ROLE_ARN }}
      - name: setup kustomize
        uses: imranismail/setup-kustomize@v1
        with:
          kustomize-version: "3.8.4"
      - name: Deploy k8s yaml
        id: deploy
        uses: ./.github/actions/k8s-deploy-action
        with:
          directory: ./k8s/environments/production
          image: docker.pkg.github.com/${{ github.repository }}/${{env.APPLICATION_NAME}}:${{needs.tag_and_release.outputs.release_tag}}-cpu
          namespace: martech-prod
          app_id: bert-email-router
      - name: Get hostname
        run: echo "Hostname is ${{ steps.deploy.outputs.hostname }}"